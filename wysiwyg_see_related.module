<?php

/**
 * @file
 * Main Wywisyg plugin module file.
 */
define("SEE_RELATED_PLACEHOLDER_PATTERN", '<!--wysiwyg_see-related_plugin-->');

/**
 * Implements hook_wysiwyg_include_directory().
 */
function wysiwyg_see_related_wysiwyg_include_directory($type) {
  return $type;
}

/**
 * Implements hook_node_view().
 */
function wysiwyg_see_related_node_view($node) {
  // Early return.
  $field_name = variable_get('wysiwyg_see_related_field_name', 'nonexistent_field');
  if (empty($node->{$field_name})) {
    return;
  }

  // Look up the fields to act on.
  foreach (element_children($node->content) as $field_id) {
    if (empty($node->content[$field_id]['#items'])) {
      continue;
    }

    foreach ($node->content[$field_id]['#items'] as $key => $field) {
      // Look for any field with a text format.
      if (empty($node->content[$field_id][$key]['#markup'])) {
        continue;
      }

      $field_markup = $node->content[$field_id][$key]['#markup'];
      if (isset($field['format']) && _wysiwyg_see_related_detect_placeholders($field_markup) !== FALSE) {

        $replacement = _wysiwyg_see_related_get_replacement($node);
        $node->content[$field_id][$key]['#markup'] = _wysiwyg_see_related_replace_pattern($field_markup, $replacement);
      }
    }
  }
}

/**
 * Detect placeholders for "See related" content.
 */
function _wysiwyg_see_related_detect_placeholders($markup) {
  return strpos($markup, SEE_RELATED_PLACEHOLDER_PATTERN);
}

/**
 * Replace placeholder with prepared replacement value string.
 */
function _wysiwyg_see_related_replace_pattern($field, $replacement) {
  return str_replace(SEE_RELATED_PLACEHOLDER_PATTERN, $replacement, $field);
}

/**
 * Get the "See related" rendered field value.
 */
function _wysiwyg_see_related_get_replacement($node) {
  static $replacement = '';

  if (empty($replacement) && $field_name = variable_get('wysiwyg_see_related_field_name')) {
    $replacement = field_view_field('node', $node, $field_name);
    $replacement = render($replacement);
  }

  return $replacement;
}


/**
 * Implements hook_filter_info().
 */
function wysiwyg_see_related_filter_info() {
  $filters['wysiwyg_see_related_populate'] = array(
    'title' => t('Auto-populate wysiwyg see related placeholder'),
    'description' => t('If no see-related placeholder has been added to the text, one will be automatically added to the paragraph of your choice.'),
    'process callback' => 'wysiwyg_see_related_filter_callback',
    //'tips callback' => '_filter_autop_tips', // TODO: Add tips callback.
    'settings callback' => 'wysiwyg_see_related_filter_settings',
  );
  return $filters;
}

/**
 * Settings callback for wysiwyg_see_related_populate filter.
 */
function wysiwyg_see_related_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['paragraph_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Insert as paragraph number'),
    '#default_value' => isset($filter->settings['paragraph_number']) ? $filter->settings['paragraph_number'] : '',
    '#maxlength' => 2,
    '#description' => t('Select the paragaph number that the see related placeholder should be inserted to. (E.g. 1 would be at the very beginning of the text.'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  return $settings;
}

/**
 * Process callback for wysiwyg_see_related_populate filter.
 */
function wysiwyg_see_related_filter_callback($text, $filter) {

  if (strpos($text, SEE_RELATED_PLACEHOLDER_PATTERN) === FALSE) {
    $domdoc = new DOMDocument();

    // DomDocument is funny about UTF-8.
    // @See: http://stackoverflow.com/a/8218649
    $domdoc->loadHTML(mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8'));
    $element = $domdoc->createElement('p');
    $comment = $domdoc->createComment(SEE_RELATED_PLACEHOLDER_PATTERN_INNER);
    $element->appendChild($comment);
    $paragraphs = $domdoc->getElementsByTagName('p');

    if ($paragraph_element = $paragraphs->item($filter->settings['paragraph_number'] - 1)) {
      $paragraph_element->parentNode->insertBefore($element, $paragraph_element);
      $text = $domdoc->saveHTML();
    }
  }

  return $text;
}
