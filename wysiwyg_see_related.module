<?php

/**
 * @file
 * Main Wywisyg plugin module file.
 */
define("SEE_RELATED_PLACEHOLDER_PATTERN", '<!--wysiwyg_see-related_plugin-->');

/**
 * Implements hook_wysiwyg_include_directory().
 */
function wysiwyg_see_related_wysiwyg_include_directory($type) {
  return $type;
}

/**
 * Implements hook_node_view().
 */
function wysiwyg_see_related_node_view($node) {

  $field_name = variable_get('wysiwyg_see_related_field_name', 'nonexistent_field');
  if (empty($node->{$field_name})) {
    return;
  }
  // Look up the fields to act on.
  foreach (element_children($node->content) as $field_id) {
    if (empty($node->content[$field_id]['#items'])) {
      continue;
    }

    foreach ($node->content[$field_id]['#items'] as $key => $field) {
      // Look for any field with a text format.
      if (empty($node->content[$field_id][$key]['#markup'])) {
        continue;
      }
      $field_markup = $node->content[$field_id][$key]['#markup'];
      if (isset($field['format']) && _wysiwyg_see_related_detect_placeholders($field_markup) !== FALSE) {
        // placeholder found
          $replacement = _wysiwyg_see_related_get_replacement($node);
          $node->content[$field_id][$key]['#markup'] = _wysiwyg_see_related_replace_pattern($field_markup, $replacement);
      }
    }
  }
}

/**
 * Detect placeholders for "See related" content.
 */
function _wysiwyg_see_related_detect_placeholders($markup) {
  return strpos($markup, SEE_RELATED_PLACEHOLDER_PATTERN);
}

/**
 * Replace placeholder with prepared replacement value string.
 */
function _wysiwyg_see_related_replace_pattern($field, $replacement) {
  return str_replace(SEE_RELATED_PLACEHOLDER_PATTERN, $replacement, $field);
}

/**
 * Get the "See related" rendered field value.
 */
function _wysiwyg_see_related_get_replacement($node) {
  static $replacement = '';

  if (empty($replacement) && $field_name = variable_get('wysiwyg_see_related_field_name')) {
    $replacement = field_view_field('node', $node, $field_name);
    $replacement = render($replacement);
  }
  return $replacement;
}

/**
 * Implementation of hook_token_info()
 * We create the token [node:related_nodes] that will be 0 or 1 if the node has set related nodes.
 */
function wysiwyg_see_related_token_info() {
  $info['tokens']['node']['related_nodes'] = array(
    'name' => t('See Related Nodes'),
    'description' => t('Returns the if the node has or not related nodes setup.'),
  );
  return $info;
}

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 */
function wysiwyg_see_related_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {

      switch ($name) {
        case 'related_nodes':
          $all_setup_flag = wysiwyg_see_related_node_has_related_setup($node);
          $replacements[$original] = $all_setup_flag ? 1 : 0;
          break;
      }
    }
  }
  return $replacements;
}

function wysiwyg_see_related_node_has_related_setup($node) {

  $type = $node->type;
  $all_setup = FALSE;
  $placeholder = FALSE;
  $related_field_setup = TRUE;

  // If the functionality is not enabled we don't continue, and $all_setup = true;
  if(!module_exists('wysiwyg_see_related') || !variable_get('wysiwyg_see_related_enabled')){
    return true;
  }

  // If node type exists.
  if (node_type_load($type) != FALSE) {

    // WYSIWYG DETECTION
    // We load the names of the node type fields.
    $node_fields = field_info_instances('node', $type);
    foreach ($node_fields as $node_field) {
      if (isset($node_field['settings']['text_processing']) && ($node_field['settings']['text_processing'] == 1 || $node_field['settings']['text_processing'] == 2)) {
        $item = field_get_items('node', $node, $node_field['field_name']);
        foreach ($item as $item_instance) {
          $markup = $item_instance['value'];
          if (_wysiwyg_see_related_detect_placeholders($markup) == FALSE) {
            // no placeholder found
            $placeholder = FALSE;
          }
          else {
            $placeholder = TRUE;
          }
        }
      }
    }
    // RELATED FIELD DETECTION
    $related_field_name = variable_get('wysiwyg_see_related_field_name');
    // We load the value of the
    $related_field = field_get_items('node', $node, $related_field_name);
    // If there is no related field.
    if(!$related_field){
      $related_field_setup = FALSE;
    }
    // Check that is not an emply multifield.
    else if (count($related_field) >= 2) {
      if ($related_field['0']['fid'] == 0) {
        $related_field_setup = FALSE;
      }
    }
    if ($related_field_setup && $placeholder) {
      $all_setup = TRUE;
    }
  }
  return $all_setup;
}
/**
 * hook_menu().
 *
 */
function wysiwyg_see_related_menu() {

  $items = array();
  $items['admin/config/content/wysiwyg_see_related'] = array(
    'title' => 'wysiwyg_see_related settings',
    'description' => 'Administer the settings of wysiwyg_see_related',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_see_related_admin_form'),
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * hook_form()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function wysiwyg_see_related_admin_form($form, &$form_state) {

  $form['wysiwyg_see_related_enabled'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('wysiwyg_see_related_enabled'),
    '#title' => t('Related Nodes Enabled'),
  );
  $form['wysiwyg_see_related_field_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Related Posts field name'),
    '#default_value' => variable_get('wysiwyg_see_related_field_name'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * hook_node_validate().
 *
 * @param $node
 * @param $form
 * @param $form_state
 */
function wysiwyg_see_related_node_validate($node, $form, &$form_state) {

  $all_set = wysiwyg_see_related_node_has_related_setup($node);
  if (!$all_set) {
    drupal_set_message(t("This [Article / Review] does not have a related link box. All Articles / Reviews should have a related link box. Please add one using the WYSIWYG button."), 'error');
  }
}
